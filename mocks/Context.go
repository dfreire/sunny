package mocks

import (
	"io"
	"mime/multipart"
	"time"

	"github.com/labstack/echo"
	"github.com/labstack/echo/engine"
	"github.com/labstack/gommon/log"
	"github.com/stretchr/testify/mock"
	"golang.org/x/net/context"
)

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

// Attachment provides a mock function with given fields: _a0, _a1
func (_m *Context) Attachment(_a0 io.ReadSeeker, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.ReadSeeker, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Bind provides a mock function with given fields: _a0
func (_m *Context) Bind(_a0 interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Contains provides a mock function with given fields: _a0
func (_m *Context) Contains(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Cookie provides a mock function with given fields: _a0
func (_m *Context) Cookie(_a0 string) (engine.Cookie, error) {
	ret := _m.Called(_a0)

	var r0 engine.Cookie
	if rf, ok := ret.Get(0).(func(string) engine.Cookie); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(engine.Cookie)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cookies provides a mock function with given fields:
func (_m *Context) Cookies() []engine.Cookie {
	ret := _m.Called()

	var r0 []engine.Cookie
	if rf, ok := ret.Get(0).(func() []engine.Cookie); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]engine.Cookie)
		}
	}

	return r0
}

// Deadline provides a mock function with given fields:
func (_m *Context) Deadline() (time.Time, bool) {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Del provides a mock function with given fields: _a0
func (_m *Context) Del(_a0 string) {
	_m.Called(_a0)
}

// Done provides a mock function with given fields:
func (_m *Context) Done() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Echo provides a mock function with given fields:
func (_m *Context) Echo() *echo.Echo {
	ret := _m.Called()

	var r0 *echo.Echo
	if rf, ok := ret.Get(0).(func() *echo.Echo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*echo.Echo)
		}
	}

	return r0
}

// Err provides a mock function with given fields:
func (_m *Context) Err() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Error provides a mock function with given fields: err
func (_m *Context) Error(err error) {
	_m.Called(err)
}

// File provides a mock function with given fields: _a0
func (_m *Context) File(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FormFile provides a mock function with given fields: _a0
func (_m *Context) FormFile(_a0 string) (*multipart.FileHeader, error) {
	ret := _m.Called(_a0)

	var r0 *multipart.FileHeader
	if rf, ok := ret.Get(0).(func(string) *multipart.FileHeader); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.FileHeader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FormParams provides a mock function with given fields:
func (_m *Context) FormParams() map[string][]string {
	ret := _m.Called()

	var r0 map[string][]string
	if rf, ok := ret.Get(0).(func() map[string][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	return r0
}

// FormValue provides a mock function with given fields: _a0
func (_m *Context) FormValue(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *Context) Get(_a0 string) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// HTML provides a mock function with given fields: _a0, _a1
func (_m *Context) HTML(_a0 int, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Handler provides a mock function with given fields:
func (_m *Context) Handler() echo.HandlerFunc {
	ret := _m.Called()

	var r0 echo.HandlerFunc
	if rf, ok := ret.Get(0).(func() echo.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.HandlerFunc)
		}
	}

	return r0
}

// JSON provides a mock function with given fields: _a0, _a1
func (_m *Context) JSON(_a0 int, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JSONBlob provides a mock function with given fields: _a0, _a1
func (_m *Context) JSONBlob(_a0 int, _a1 []byte) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JSONP provides a mock function with given fields: _a0, _a1, _a2
func (_m *Context) JSONP(_a0 int, _a1 string, _a2 interface{}) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logger provides a mock function with given fields:
func (_m *Context) Logger() *log.Logger {
	ret := _m.Called()

	var r0 *log.Logger
	if rf, ok := ret.Get(0).(func() *log.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*log.Logger)
		}
	}

	return r0
}

// MultipartForm provides a mock function with given fields:
func (_m *Context) MultipartForm() (*multipart.Form, error) {
	ret := _m.Called()

	var r0 *multipart.Form
	if rf, ok := ret.Get(0).(func() *multipart.Form); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multipart.Form)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetContext provides a mock function with given fields:
func (_m *Context) NetContext() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// NoContent provides a mock function with given fields: _a0
func (_m *Context) NoContent(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// P provides a mock function with given fields: _a0
func (_m *Context) P(_a0 int) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Param provides a mock function with given fields: _a0
func (_m *Context) Param(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ParamNames provides a mock function with given fields:
func (_m *Context) ParamNames() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ParamValues provides a mock function with given fields:
func (_m *Context) ParamValues() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Path provides a mock function with given fields:
func (_m *Context) Path() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// QueryParam provides a mock function with given fields: _a0
func (_m *Context) QueryParam(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// QueryParams provides a mock function with given fields:
func (_m *Context) QueryParams() map[string][]string {
	ret := _m.Called()

	var r0 map[string][]string
	if rf, ok := ret.Get(0).(func() map[string][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	return r0
}

// Redirect provides a mock function with given fields: _a0, _a1
func (_m *Context) Redirect(_a0 int, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Render provides a mock function with given fields: _a0, _a1, _a2
func (_m *Context) Render(_a0 int, _a1 string, _a2 interface{}) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Request provides a mock function with given fields:
func (_m *Context) Request() engine.Request {
	ret := _m.Called()

	var r0 engine.Request
	if rf, ok := ret.Get(0).(func() engine.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(engine.Request)
		}
	}

	return r0
}

// Reset provides a mock function with given fields: _a0, _a1
func (_m *Context) Reset(_a0 engine.Request, _a1 engine.Response) {
	_m.Called(_a0, _a1)
}

// Response provides a mock function with given fields:
func (_m *Context) Response() engine.Response {
	ret := _m.Called()

	var r0 engine.Response
	if rf, ok := ret.Get(0).(func() engine.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(engine.Response)
		}
	}

	return r0
}

// ServeContent provides a mock function with given fields: _a0, _a1, _a2
func (_m *Context) ServeContent(_a0 io.ReadSeeker, _a1 string, _a2 time.Time) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.ReadSeeker, string, time.Time) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: _a0, _a1
func (_m *Context) Set(_a0 string, _a1 interface{}) {
	_m.Called(_a0, _a1)
}

// SetCookie provides a mock function with given fields: _a0
func (_m *Context) SetCookie(_a0 engine.Cookie) {
	_m.Called(_a0)
}

// SetHandler provides a mock function with given fields: _a0
func (_m *Context) SetHandler(_a0 echo.HandlerFunc) {
	_m.Called(_a0)
}

// SetNetContext provides a mock function with given fields: _a0
func (_m *Context) SetNetContext(_a0 context.Context) {
	_m.Called(_a0)
}

// SetParamNames provides a mock function with given fields: _a0
func (_m *Context) SetParamNames(_a0 ...string) {
	_m.Called(_a0)
}

// SetParamValues provides a mock function with given fields: _a0
func (_m *Context) SetParamValues(_a0 ...string) {
	_m.Called(_a0)
}

// SetPath provides a mock function with given fields: _a0
func (_m *Context) SetPath(_a0 string) {
	_m.Called(_a0)
}

// String provides a mock function with given fields: _a0, _a1
func (_m *Context) String(_a0 int, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Value provides a mock function with given fields: key
func (_m *Context) Value(key interface{}) interface{} {
	ret := _m.Called(key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// XML provides a mock function with given fields: _a0, _a1
func (_m *Context) XML(_a0 int, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// XMLBlob provides a mock function with given fields: _a0, _a1
func (_m *Context) XMLBlob(_a0 int, _a1 []byte) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []byte) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
